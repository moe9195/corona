{"ast":null,"code":"import _classCallCheck from \"/home/moe/Development/corona/online-retail-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/moe/Development/corona/online-retail-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/moe/Development/corona/online-retail-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/moe/Development/corona/online-retail-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/moe/Development/corona/online-retail-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/moe/Development/corona/online-retail-dashboard/src/components/TimeGraph.js\";\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport colormap from \"colormap\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nvar countries = countryData[0];\nvar countriesFull = countryData[1];\nvar instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\"\n});\n\nvar TimeGraph =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimeGraph, _Component);\n\n  function TimeGraph() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TimeGraph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimeGraph)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: null,\n      selector: \"confirmed\",\n      logarithmic: false\n    };\n\n    _this.capitalizeFirstLetter = function (string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    };\n\n    _this.formatDate = function (date) {\n      if (date == 0) {\n        return 0;\n      }\n\n      var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      var mm = date.substring(5, 7);\n      var dd = date.substring(8, 11);\n      return monthNames[parseInt(mm) - 1] + \" \" + dd;\n    };\n\n    _this.setupTicks = function (arr, delta, date) {\n      var l = arr.length;\n      delta = Math.floor(l / delta);\n      var newArr = [];\n\n      for (var i = 0; i < arr.length; i = i + delta) {\n        if (date) {\n          newArr.push(_this.formatDate(arr[i]));\n        } else {\n          newArr.push(arr[i]);\n        }\n      }\n\n      return newArr;\n    };\n\n    _this.handleOnClick = function (selected) {\n      _this.setState({\n        selector: selected\n      });\n    };\n\n    _this.handleSwitch = function () {\n      _this.setState({\n        logarithmic: !_this.state.logarithmic\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TimeGraph, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selectors = [\"confirmed\", \"deaths\", \"recovered\"];\n      var buttons = selectors.map(function (selector) {\n        return React.createElement(\"button\", {\n          className: _this2.state.selector === selector ? \"btn btn-outline-dark clicked\" : \"btn btn-outline-dark\",\n          onClick: function onClick() {\n            return _this2.handleOnClick(selector);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, selector);\n      });\n      var data = this.props.data;\n      var plotDataY = [[[]], [[]], [[]]],\n          plotDataX = [];\n\n      for (var iso in data) {\n        var countryObj = data[iso];\n        var confirmedArr = [],\n            deathsArr = [],\n            recoveredArr = [],\n            timeArr = [],\n            counter = 0,\n            dateArr = [];\n\n        for (var date in countryObj) {\n          var confirmed = countryObj[date].confirmed;\n          var deaths = countryObj[date].deaths;\n          var recovered = countryObj[date].recovered;\n          confirmedArr.push(confirmed);\n          deathsArr.push(deaths);\n          recoveredArr.push(recovered);\n          timeArr.push(counter);\n          dateArr.push(date);\n          counter++;\n        }\n\n        plotDataX.push(timeArr);\n        plotDataY[0].push(confirmedArr);\n        plotDataY[1].push(deathsArr);\n        plotDataY[2].push(recoveredArr);\n      }\n\n      var scatterData = [];\n      var select = this.state.selector === \"confirmed\" ? 0 : this.state.selector === \"deaths\" ? 1 : this.state.selector === \"recovered\" ? 2 : 3;\n\n      for (var i = 1; i < plotDataX.length + 1; i++) {\n        var trace = {\n          x: dateArr,\n          y: plotDataY[select][i],\n          type: \"scatter\",\n          name: countriesFull[i - 1]\n        };\n        scatterData.push(trace);\n      } // console.log(\"test\");\n      // var tickvals = [0],\n      //   ticktxt = [0];\n      // if (plotDataX.length > 1 && dateArr.length > 1) {\n      //   tickvals = this.setupTicks(plotDataX[1], 25, false);\n      //   ticktxt = this.setupTicks(dateArr, 25, true);\n      // }\n\n\n      var logType = this.state.logarithmic ? \"log\" : \"null\";\n      var colorway = colormap({\n        colormap: \"jet\",\n        nshades: countries.length,\n        format: \"hex\",\n        alpha: 1\n      });\n\n      if (this.props.loading) {\n        return React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, buttons, React.createElement(\"div\", {\n        className: \"btn toggler\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"custom-control custom-switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        class: \"custom-control-input\",\n        onClick: function onClick() {\n          return _this2.handleSwitch();\n        },\n        id: \"switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        class: \"custom-control-label\",\n        for: \"switch\",\n        style: {\n          color: \"#99aab5\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"logarithmic\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Plot, {\n        data: scatterData,\n        layout: {\n          modebar: {\n            bgcolor: \"rgba(255,255,255,0)\"\n          },\n          title: \"Total \".concat(this.capitalizeFirstLetter(this.state.selector)),\n          font: {\n            color: \"#99aab5\",\n            size: 12\n          },\n          xaxis: {\n            title: \"Date\",\n            nticks: 15\n          },\n          yaxis: {\n            title: \"Number\",\n            type: logType\n          },\n          colorway: colorway,\n          plot_bgcolor: \"#161616\",\n          paper_bgcolor: \"#161616\",\n          autosize: true,\n          hovermode: \"closest\",\n          legend: {\n            // bgcolor: \"#343434\",\n            // bordercolor: \"#161616\",\n            // borderwidth: 1,\n            font: {\n              size: 5\n            },\n            // x: 0,\n            // y: 0,\n            autosize: true,\n            orientation: \"h\"\n          }\n        },\n        config: {\n          modeBarButtonsToRemove: [\"toggleSpikelines\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\"],\n          displaylogo: false\n        },\n        useResizeHandler: true,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        modeBarButtonsToRemove: [\"toImage\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TimeGraph;\n}(Component);\n\nexport default TimeGraph;","map":{"version":3,"sources":["/home/moe/Development/corona/online-retail-dashboard/src/components/TimeGraph.js"],"names":["React","Component","Plot","axios","colormap","countryData","Loading","countries","countriesFull","instance","create","baseURL","TimeGraph","state","data","selector","logarithmic","capitalizeFirstLetter","string","charAt","toUpperCase","slice","formatDate","date","monthNames","mm","substring","dd","parseInt","setupTicks","arr","delta","l","length","Math","floor","newArr","i","push","handleOnClick","selected","setState","handleSwitch","selectors","buttons","map","props","plotDataY","plotDataX","iso","countryObj","confirmedArr","deathsArr","recoveredArr","timeArr","counter","dateArr","confirmed","deaths","recovered","scatterData","select","trace","x","y","type","name","logType","colorway","nshades","format","alpha","loading","width","height","color","modebar","bgcolor","title","font","size","xaxis","nticks","yaxis","plot_bgcolor","paper_bgcolor","autosize","hovermode","legend","orientation","modeBarButtonsToRemove","displaylogo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport colormap from \"colormap\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\n\nconst countries = countryData[0];\nconst countriesFull = countryData[1];\n\nconst instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n});\n\nclass TimeGraph extends Component {\n  state = {\n    data: null,\n    selector: \"confirmed\",\n    logarithmic: false,\n  };\n\n  // getCountries = () => {\n  //   const countriesObj = this.state.data;\n  //   if (countriesObj) {\n  //     return countriesObj;\n  //   }\n  // };\n\n  capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  formatDate = (date) => {\n    if (date == 0) {\n      return 0;\n    }\n    const monthNames = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    const mm = date.substring(5, 7);\n    const dd = date.substring(8, 11);\n    return monthNames[parseInt(mm) - 1] + \" \" + dd;\n  };\n\n  setupTicks = (arr, delta, date) => {\n    const l = arr.length;\n    delta = Math.floor(l / delta);\n    let newArr = [];\n    for (let i = 0; i < arr.length; i = i + delta) {\n      if (date) {\n        newArr.push(this.formatDate(arr[i]));\n      } else {\n        newArr.push(arr[i]);\n      }\n    }\n    return newArr;\n  };\n\n  handleOnClick = (selected) => {\n    this.setState({ selector: selected });\n  };\n  handleSwitch = () => {\n    this.setState({ logarithmic: !this.state.logarithmic });\n  };\n\n  render() {\n    const selectors = [\"confirmed\", \"deaths\", \"recovered\"];\n\n    const buttons = selectors.map((selector) => (\n      <button\n        className={\n          this.state.selector === selector\n            ? \"btn btn-outline-dark clicked\"\n            : \"btn btn-outline-dark\"\n        }\n        onClick={() => this.handleOnClick(selector)}\n      >\n        {selector}\n      </button>\n    ));\n\n    const data = this.props.data;\n    let plotDataY = [[[]], [[]], [[]]],\n      plotDataX = [];\n    for (let iso in data) {\n      let countryObj = data[iso];\n      var confirmedArr = [],\n        deathsArr = [],\n        recoveredArr = [],\n        timeArr = [],\n        counter = 0,\n        dateArr = [];\n      for (let date in countryObj) {\n        var confirmed = countryObj[date].confirmed;\n        var deaths = countryObj[date].deaths;\n        var recovered = countryObj[date].recovered;\n        confirmedArr.push(confirmed);\n        deathsArr.push(deaths);\n        recoveredArr.push(recovered);\n        timeArr.push(counter);\n        dateArr.push(date);\n        counter++;\n      }\n      plotDataX.push(timeArr);\n      plotDataY[0].push(confirmedArr);\n      plotDataY[1].push(deathsArr);\n      plotDataY[2].push(recoveredArr);\n    }\n\n    let scatterData = [];\n    let select =\n      this.state.selector === \"confirmed\"\n        ? 0\n        : this.state.selector === \"deaths\"\n        ? 1\n        : this.state.selector === \"recovered\"\n        ? 2\n        : 3;\n\n    for (let i = 1; i < plotDataX.length + 1; i++) {\n      var trace = {\n        x: dateArr,\n        y: plotDataY[select][i],\n        type: \"scatter\",\n        name: countriesFull[i - 1],\n      };\n      scatterData.push(trace);\n    }\n\n    // console.log(\"test\");\n    // var tickvals = [0],\n    //   ticktxt = [0];\n    // if (plotDataX.length > 1 && dateArr.length > 1) {\n    //   tickvals = this.setupTicks(plotDataX[1], 25, false);\n    //   ticktxt = this.setupTicks(dateArr, 25, true);\n    // }\n\n    let logType = this.state.logarithmic ? \"log\" : \"null\";\n    const colorway = colormap({\n      colormap: \"jet\",\n      nshades: countries.length,\n      format: \"hex\",\n      alpha: 1,\n    });\n\n    if (this.props.loading) {\n      return <Loading />;\n    }\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        {buttons}\n        <div className=\"btn toggler\">\n          <div class=\"custom-control custom-switch\">\n            <input\n              type=\"checkbox\"\n              class=\"custom-control-input\"\n              onClick={() => this.handleSwitch()}\n              id=\"switch\"\n            />\n\n            <label\n              class=\"custom-control-label\"\n              for=\"switch\"\n              style={{ color: \"#99aab5\" }}\n            >\n              logarithmic\n            </label>\n          </div>\n        </div>\n        <div>\n          <Plot\n            data={scatterData}\n            layout={{\n              modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n              title: `Total ${this.capitalizeFirstLetter(this.state.selector)}`,\n              font: { color: \"#99aab5\", size: 12 },\n              xaxis: { title: \"Date\", nticks: 15 },\n              yaxis: { title: \"Number\", type: logType },\n              colorway: colorway,\n              plot_bgcolor: \"#161616\",\n              paper_bgcolor: \"#161616\",\n              autosize: true,\n              hovermode: \"closest\",\n              legend: {\n                // bgcolor: \"#343434\",\n                // bordercolor: \"#161616\",\n                // borderwidth: 1,\n                font: { size: 5 },\n                // x: 0,\n                // y: 0,\n                autosize: true,\n                orientation: \"h\",\n              },\n            }}\n            config={{\n              modeBarButtonsToRemove: [\n                \"toggleSpikelines\",\n                \"zoomIn2d\",\n                \"zoomOut2d\",\n                \"autoScale2d\",\n                \"hoverClosestCartesian\",\n                \"hoverCompareCartesian\",\n              ],\n              displaylogo: false,\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            modeBarButtonsToRemove={[\"toImage\"]}\n          />\n        </div>\n        <br /> <br /> <br /> <br />\n      </div>\n    );\n  }\n}\n\nexport default TimeGraph;\n"]},"metadata":{},"sourceType":"module"}