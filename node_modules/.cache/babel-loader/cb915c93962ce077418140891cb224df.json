{"ast":null,"code":"import _regeneratorRuntime from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/moe/Development/corona/covid19-dashboard/src/components/CountryInfo.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { compose } from \"redux\";\nvar dictionary = countryData[4];\nvar instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n  loading: true\n});\n\nvar CountryInfo = function CountryInfo(_ref) {\n  var country = _ref.country,\n      global = _ref.global;\n\n  var _useState = useState(global),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      X = _useState6[0],\n      setX = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      Y1 = _useState8[0],\n      setY1 = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      Y2 = _useState10[0],\n      setY2 = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      Y3 = _useState12[0],\n      setY3 = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      Y4 = _useState14[0],\n      setY4 = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      logarithmic = _useState16[0],\n      setLogarithmic = _useState16[1];\n\n  var _useState17 = useState(\"confirmed\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      selector = _useState18[0],\n      setSelector = _useState18[1];\n\n  var handleSwitch = function handleSwitch() {\n    setLogarithmic(!logarithmic);\n  };\n\n  var handleOnClick = function handleOnClick(selected) {\n    setSelector(selected);\n  };\n\n  var fetchData =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(country) {\n      var response, _countryData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return instance.get(\"country/\".concat(country));\n\n            case 3:\n              response = _context.sent;\n              _countryData = response.data.result;\n              setData(_countryData);\n              console.log(data[\"2020-03-22\"]);\n              setLoading(true);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 10]]);\n    }));\n\n    return function fetchData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchData(country);\n  }, [country]);\n  var logType = logarithmic ? \"log\" : \"null\";\n\n  if (data && loading) {\n    var Xtemp = [];\n    var Y1temp = [],\n        Y2temp = [],\n        Y3temp = [],\n        Y4temp = [];\n\n    for (var key in data) {\n      Xtemp.push(key);\n      Y1temp.push(data[key].confirmed);\n      Y2temp.push(data[key].deaths);\n      Y3temp.push(data[key].recovered);\n    }\n\n    if (Xtemp.length > 1) {\n      setX(Xtemp);\n      setY1(Y1temp);\n      setY2(Y2temp);\n      setY3(Y3temp);\n\n      for (var i = 0; i < Xtemp.length; i++) {\n        Y4temp.push(Y1temp[i + 1] - Y1temp[i]);\n      }\n\n      setY4(Y4temp);\n      setLoading(false);\n    }\n  }\n\n  if (!loading) {\n    var trace1 = {\n      x: X,\n      y: Y1,\n      type: \"scatter\",\n      name: \"Confirmed\"\n    };\n    var trace2 = {\n      x: X,\n      y: Y2,\n      type: \"scatter\",\n      name: \"Deaths\"\n    };\n    var trace3 = {\n      x: X,\n      y: Y3,\n      type: \"scatter\",\n      name: \"Recovered\"\n    };\n    var bar = {\n      x: X,\n      y: Y4,\n      type: \"bar\",\n      name: \"New Cases\"\n    };\n    var plotData = [trace1, trace2, trace3, bar];\n    var selectors = [\"confirmed\", \"deaths\", \"recovered\", \"daily increase\"];\n    var select = selector === \"confirmed\" ? 0 : selector === \"deaths\" ? 1 : selector === \"recovered\" ? 2 : selecter === \"daily increase\" ? 3 : null;\n    var buttons = selectors.map(function (type) {\n      return React.createElement(\"button\", {\n        className: selector === type ? \"btn btn-outline-dark clicked\" : \"btn btn-outline-dark\",\n        style: {\n          padding: \"0vh 5vh 0vh 5vh\"\n        },\n        onClick: function onClick() {\n          return handleOnClick(type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, type);\n    });\n    return React.createElement(\"div\", {\n      className: \"padded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, buttons, React.createElement(\"div\", {\n      className: \"btn toggler\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"custom-control custom-switch \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      class: \"custom-control-input\",\n      onClick: function onClick() {\n        return handleSwitch();\n      },\n      id: \"country-info-switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      class: \"custom-control-label\",\n      for: \"country-info-switch\",\n      style: {\n        color: \"#99aab5\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"logarithmic\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Plot, {\n      data: [plotData[0]],\n      layout: {\n        modebar: {\n          bgcolor: \"rgba(255,255,255,0)\"\n        },\n        title: !country ? \"Global\" : \"\".concat(dictionary[country]),\n        font: {\n          color: \"#99aab5\",\n          size: 12\n        },\n        xaxis: {\n          title: \"Date\",\n          nticks: 15\n        },\n        yaxis: {\n          title: \"Number\",\n          type: logType\n        },\n        plot_bgcolor: \"#191d20\",\n        paper_bgcolor: \"#191d20\",\n        height: \"385\",\n        autosize: true\n      },\n      useResizeHandler: true,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      config: {\n        modeBarButtonsToRemove: [\"toggleSpikelines\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"select2d\", \"lasso2d\"],\n        displaylogo: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Click on a country from the map\");\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    country: state.data.country\n  };\n};\n\nexport default connect(mapStateToProps, null)(CountryInfo);","map":{"version":3,"sources":["/home/moe/Development/corona/covid19-dashboard/src/components/CountryInfo.js"],"names":["React","useState","useEffect","useCallback","Plot","countryData","connect","axios","compose","dictionary","instance","create","baseURL","loading","CountryInfo","country","global","data","setData","setLoading","X","setX","Y1","setY1","Y2","setY2","Y3","setY3","Y4","setY4","logarithmic","setLogarithmic","selector","setSelector","handleSwitch","handleOnClick","selected","fetchData","get","response","result","console","log","error","logType","Xtemp","Y1temp","Y2temp","Y3temp","Y4temp","key","push","confirmed","deaths","recovered","length","i","trace1","x","y","type","name","trace2","trace3","bar","plotData","selectors","select","selecter","buttons","map","padding","color","modebar","bgcolor","title","font","size","xaxis","nticks","yaxis","plot_bgcolor","paper_bgcolor","height","autosize","width","modeBarButtonsToRemove","displaylogo","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { compose } from \"redux\";\n\nconst dictionary = countryData[4];\n\nconst instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n  loading: true,\n});\n\nconst CountryInfo = ({ country, global }) => {\n  const [data, setData] = useState(global);\n  const [loading, setLoading] = useState(true);\n  const [X, setX] = useState([]);\n  const [Y1, setY1] = useState([]);\n  const [Y2, setY2] = useState([]);\n  const [Y3, setY3] = useState([]);\n  const [Y4, setY4] = useState([]);\n  const [logarithmic, setLogarithmic] = useState(false);\n  const [selector, setSelector] = useState(\"confirmed\");\n\n  const handleSwitch = () => {\n    setLogarithmic(!logarithmic);\n  };\n\n  const handleOnClick = (selected) => {\n    setSelector(selected);\n  };\n\n  const fetchData = async (country) => {\n    try {\n      let response = await instance.get(`country/${country}`);\n      let countryData = response.data.result;\n      setData(countryData);\n      console.log(data[\"2020-03-22\"]);\n      setLoading(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(\n    () => {\n      fetchData(country);\n    },\n    [country]\n  );\n\n  let logType = logarithmic ? \"log\" : \"null\";\n\n  if (data && loading) {\n    var Xtemp = [];\n    var Y1temp = [],\n      Y2temp = [],\n      Y3temp = [],\n      Y4temp = [];\n    for (var key in data) {\n      Xtemp.push(key);\n      Y1temp.push(data[key].confirmed);\n      Y2temp.push(data[key].deaths);\n      Y3temp.push(data[key].recovered);\n    }\n    if (Xtemp.length > 1) {\n      setX(Xtemp);\n      setY1(Y1temp);\n      setY2(Y2temp);\n      setY3(Y3temp);\n      for (let i = 0; i < Xtemp.length; i++) {\n        Y4temp.push(Y1temp[i + 1] - Y1temp[i]);\n      }\n      setY4(Y4temp);\n      setLoading(false);\n    }\n  }\n\n  if (!loading) {\n    const trace1 = {\n      x: X,\n      y: Y1,\n      type: \"scatter\",\n      name: \"Confirmed\",\n    };\n    const trace2 = {\n      x: X,\n      y: Y2,\n      type: \"scatter\",\n      name: \"Deaths\",\n    };\n    const trace3 = {\n      x: X,\n      y: Y3,\n      type: \"scatter\",\n      name: \"Recovered\",\n    };\n    const bar = {\n      x: X,\n      y: Y4,\n      type: \"bar\",\n      name: \"New Cases\",\n    };\n    const plotData = [trace1, trace2, trace3, bar];\n\n    const selectors = [\"confirmed\", \"deaths\", \"recovered\", \"daily increase\"];\n    let select =\n      selector === \"confirmed\"\n        ? 0\n        : selector === \"deaths\"\n        ? 1\n        : selector === \"recovered\"\n        ? 2\n        : selecter === \"daily increase\"\n        ? 3\n        : null;\n\n    const buttons = selectors.map((type) => (\n      <button\n        className={\n          selector === type\n            ? \"btn btn-outline-dark clicked\"\n            : \"btn btn-outline-dark\"\n        }\n        style={{ padding: \"0vh 5vh 0vh 5vh\" }}\n        onClick={() => handleOnClick(type)}\n      >\n        {type}\n      </button>\n    ));\n\n    return (\n      <div className=\"padded\">\n        {buttons}\n        <div className=\"btn toggler\">\n          <div class=\"custom-control custom-switch \">\n            <input\n              type=\"checkbox\"\n              class=\"custom-control-input\"\n              onClick={() => handleSwitch()}\n              id=\"country-info-switch\"\n            />\n\n            <label\n              class=\"custom-control-label\"\n              for=\"country-info-switch\"\n              style={{ color: \"#99aab5\" }}\n            >\n              logarithmic\n            </label>\n          </div>\n        </div>\n        <div>\n          <Plot\n            data={[plotData[0]]}\n            layout={{\n              modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n              title: !country ? \"Global\" : `${dictionary[country]}`,\n              font: { color: \"#99aab5\", size: 12 },\n              xaxis: { title: \"Date\", nticks: 15 },\n              yaxis: { title: \"Number\", type: logType },\n              plot_bgcolor: \"#191d20\",\n              paper_bgcolor: \"#191d20\",\n              height: \"385\",\n              autosize: true,\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            config={{\n              modeBarButtonsToRemove: [\n                \"toggleSpikelines\",\n                \"zoomIn2d\",\n                \"zoomOut2d\",\n                \"autoScale2d\",\n                \"hoverClosestCartesian\",\n                \"hoverCompareCartesian\",\n                \"select2d\",\n                \"lasso2d\",\n              ],\n              displaylogo: false,\n            }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return <div>Click on a country from the map</div>;\n  }\n};\nconst mapStateToProps = (state) => {\n  return {\n    country: state.data.country,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(CountryInfo);\n"]},"metadata":{},"sourceType":"module"}