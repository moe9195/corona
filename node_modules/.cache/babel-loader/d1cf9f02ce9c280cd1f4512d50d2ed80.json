{"ast":null,"code":"import _classCallCheck from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/moe/Development/corona/covid19-dashboard/src/components/PieChart.js\";\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport colormap from \"colormap\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nimport translate from \"./translation\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Modal, Button } from \"react-bootstrap\";\nvar countries = countryData[1];\n\nvar PieChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PieChart, _Component);\n\n  function PieChart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PieChart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PieChart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selector: \"confirmed\",\n      show: false\n    };\n\n    _this.handleOnClick = function (selected) {\n      _this.setState({\n        selector: selected\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PieChart, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.loading !== this.props.loading) {\n        this.setState({\n          loading: !this.props.loading\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selectors = [\"Confirmed\", \"Deaths\", \"Recovered\"];\n      var buttons = selectors.map(function (type) {\n        return React.createElement(\"button\", {\n          className: _this2.state.selector === type ? \"btn btn-outline-dark clicked\" : \"btn btn-outline-dark\",\n          style: {\n            padding: \"0 1vw 0 1vw\"\n          },\n          onClick: function onClick() {\n            return _this2.handleOnClick(type);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"button-fonts\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, _this2.props.language ? type : translate[type]));\n      });\n      var confirmedData = this.props.data[0];\n      var deathsData = this.props.data[1];\n      var recoveredData = this.props.data[2];\n      var confirmedX = [],\n          confirmedY = [];\n      confirmedData.map(function (country) {\n        confirmedX.push(country.name);\n        confirmedY.push(country.confirmed);\n      });\n      var deathsX = [],\n          deathsY = [];\n      deathsData.map(function (country) {\n        deathsX.push(country.name);\n        deathsY.push(country.deaths);\n      });\n      var recoveredX = [],\n          recoveredY = [];\n      recoveredData.map(function (country) {\n        recoveredX.push(country.name);\n        recoveredY.push(country.recovered);\n      });\n      var colorway = colormap({\n        colormap: \"jet\",\n        nshades: countries.length,\n        format: \"hex\",\n        alpha: 1\n      });\n      var data = null;\n\n      if (this.state.selector === \"Confirmed\") {\n        data = [{\n          values: confirmedY,\n          labels: confirmedX,\n          type: \"pie\",\n          textinfo: \"label\",\n          rotation: \"-20\"\n        }];\n      } else if (this.state.selector === \"Deaths\") {\n        data = [{\n          values: deathsY,\n          labels: deathsX,\n          type: \"pie\",\n          textinfo: \"label\",\n          rotation: \"-20\"\n        }];\n      } else {\n        data = [{\n          values: recoveredY,\n          labels: recoveredX,\n          type: \"pie\",\n          textinfo: \"label\",\n          rotation: \"-20\"\n        }];\n      }\n\n      if (this.props.loading && data) {\n        return React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"padded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"buttons-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row button-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        style: {\n          width: \"5%\",\n          textAlign: \"left\",\n          paddingLeft: \"0.7rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \" \", React.createElement(FontAwesomeIcon, {\n        onClick: function onClick() {\n          return _this2.setState({\n            show: true\n          });\n        },\n        icon: faQuestionCircle,\n        size: \"1x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          width: \"95%\",\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, buttons))), React.createElement(Modal, {\n        show: this.state.show,\n        onHide: function onHide() {\n          return _this2.setState({\n            show: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Pie Chart\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"This pie chart is divided into slices to illustrate numerical proportion for COVID-19 cases in the Arab World. You can hover over each slice to see the number of cases in each country, as well as the percentage of cases compared to the total cases in the Arab World\"), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Plot, {\n        data: data,\n        layout: {\n          modebar: {\n            bgcolor: \"rgba(255,255,255,0)\"\n          },\n          font: {\n            color: \"#99aab5\",\n            size: 11\n          },\n          showlegend: false,\n          colorway: colorway.reverse(),\n          plot_bgcolor: \"#191d20\",\n          paper_bgcolor: \"#191d20\",\n          height: 355,\n          autosize: true,\n          margin: {\n            l: 10,\n            r: 10,\n            t: 5,\n            b: 5,\n            pad: 0\n          }\n        },\n        config: {\n          modeBarButtonsToRemove: [\"toggleSpikelines\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"hoverClosestPie\"],\n          displaylogo: false\n        },\n        useResizeHandler: true,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PieChart;\n}(Component);\n\nexport default PieChart;","map":{"version":3,"sources":["/home/moe/Development/corona/covid19-dashboard/src/components/PieChart.js"],"names":["React","Component","Plot","colormap","countryData","Loading","translate","faQuestionCircle","FontAwesomeIcon","Modal","Button","countries","PieChart","state","selector","show","handleOnClick","selected","setState","prevProps","loading","props","selectors","buttons","map","type","padding","language","confirmedData","data","deathsData","recoveredData","confirmedX","confirmedY","country","push","name","confirmed","deathsX","deathsY","deaths","recoveredX","recoveredY","recovered","colorway","nshades","length","format","alpha","values","labels","textinfo","rotation","width","textAlign","paddingLeft","modebar","bgcolor","font","color","size","showlegend","reverse","plot_bgcolor","paper_bgcolor","height","autosize","margin","l","r","t","b","pad","modeBarButtonsToRemove","displaylogo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport colormap from \"colormap\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nimport translate from \"./translation\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nconst countries = countryData[1];\n\nclass PieChart extends Component {\n  state = {\n    selector: \"confirmed\",\n    show: false\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.loading !== this.props.loading) {\n      this.setState({ loading: !this.props.loading });\n    }\n  }\n\n  handleOnClick = selected => {\n    this.setState({ selector: selected });\n  };\n\n  render() {\n    const selectors = [\"Confirmed\", \"Deaths\", \"Recovered\"];\n\n    const buttons = selectors.map(type => (\n      <button\n        className={\n          this.state.selector === type\n            ? \"btn btn-outline-dark clicked\"\n            : \"btn btn-outline-dark\"\n        }\n        style={{ padding: \"0 1vw 0 1vw\" }}\n        onClick={() => this.handleOnClick(type)}\n      >\n        <div className=\"button-fonts\">\n          {this.props.language ? type : translate[type]}\n        </div>\n      </button>\n    ));\n\n    const confirmedData = this.props.data[0];\n    const deathsData = this.props.data[1];\n    const recoveredData = this.props.data[2];\n\n    let confirmedX = [],\n      confirmedY = [];\n    confirmedData.map(country => {\n      confirmedX.push(country.name);\n      confirmedY.push(country.confirmed);\n    });\n\n    let deathsX = [],\n      deathsY = [];\n    deathsData.map(country => {\n      deathsX.push(country.name);\n      deathsY.push(country.deaths);\n    });\n\n    let recoveredX = [],\n      recoveredY = [];\n    recoveredData.map(country => {\n      recoveredX.push(country.name);\n      recoveredY.push(country.recovered);\n    });\n\n    const colorway = colormap({\n      colormap: \"jet\",\n      nshades: countries.length,\n      format: \"hex\",\n      alpha: 1\n    });\n\n    let data = null;\n    if (this.state.selector === \"Confirmed\") {\n      data = [\n        {\n          values: confirmedY,\n          labels: confirmedX,\n          type: \"pie\",\n          textinfo: \"label\",\n          rotation: \"-20\"\n        }\n      ];\n    } else if (this.state.selector === \"Deaths\") {\n      data = [\n        {\n          values: deathsY,\n          labels: deathsX,\n          type: \"pie\",\n          textinfo: \"label\",\n          rotation: \"-20\"\n        }\n      ];\n    } else {\n      data = [\n        {\n          values: recoveredY,\n          labels: recoveredX,\n          type: \"pie\",\n          textinfo: \"label\",\n          rotation: \"-20\"\n        }\n      ];\n    }\n\n    if (this.props.loading && data) {\n      return <Loading />;\n    }\n    return (\n      <div className=\"padded\">\n        <div className=\"buttons-header\">\n          <div className=\"row button-header\">\n            <a\n              style={{ width: \"5%\", textAlign: \"left\", paddingLeft: \"0.7rem\" }}\n            >\n              {\" \"}\n              <FontAwesomeIcon\n                onClick={() =>\n                  this.setState({\n                    show: true\n                  })\n                }\n                icon={faQuestionCircle}\n                size=\"1x\"\n              />\n            </a>\n            <div style={{ width: \"95%\", textAlign: \"center\" }}>{buttons}</div>\n          </div>\n        </div>\n        <Modal\n          show={this.state.show}\n          onHide={() =>\n            this.setState({\n              show: false\n            })\n          }\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Pie Chart</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            This pie chart is divided into slices to illustrate numerical\n            proportion for COVID-19 cases in the Arab World. You can hover over\n            each slice to see the number of cases in each country, as well as\n            the percentage of cases compared to the total cases in the Arab\n            World\n          </Modal.Body>\n          <Modal.Footer />\n        </Modal>\n        <div>\n          <Plot\n            data={data}\n            layout={{\n              modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n              font: { color: \"#99aab5\", size: 11 },\n              showlegend: false,\n              colorway: colorway.reverse(),\n              plot_bgcolor: \"#191d20\",\n              paper_bgcolor: \"#191d20\",\n              height: 355,\n              autosize: true,\n              margin: { l: 10, r: 10, t: 5, b: 5, pad: 0 }\n            }}\n            config={{\n              modeBarButtonsToRemove: [\n                \"toggleSpikelines\",\n                \"zoomIn2d\",\n                \"zoomOut2d\",\n                \"autoScale2d\",\n                \"hoverClosestCartesian\",\n                \"hoverCompareCartesian\",\n                \"hoverClosestPie\"\n              ],\n              displaylogo: false\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PieChart;\n"]},"metadata":{},"sourceType":"module"}