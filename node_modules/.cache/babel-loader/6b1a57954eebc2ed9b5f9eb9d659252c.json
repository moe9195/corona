{"ast":null,"code":"import _regeneratorRuntime from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/moe/Development/corona/covid19-dashboard/src/components/CountryInfo.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport Loading from \"./Loading\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nvar dictionary = countryData[4];\nvar instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n  loading: true\n});\n\nvar CountryInfo = function CountryInfo(_ref) {\n  var country = _ref.country;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      X = _useState6[0],\n      setX = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      Y1 = _useState8[0],\n      setY1 = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      Y2 = _useState10[0],\n      setY2 = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      Y3 = _useState12[0],\n      setY3 = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      Y4 = _useState14[0],\n      setY4 = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      logarithmic = _useState16[0],\n      setLogarithmic = _useState16[1];\n\n  var handleSwitch = function handleSwitch() {\n    setLogarithmic(!logarithmic);\n  };\n\n  var fetchData =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(country) {\n      var response, _countryData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return instance.get(\"country/\".concat(country));\n\n            case 3:\n              response = _context.sent;\n              _countryData = response.data.result;\n\n              if (loading) {\n                setData(_countryData);\n                setLoading(false);\n              }\n\n              console.log(_countryData[\"2020-03-22\"]);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 9]]);\n    }));\n\n    return function fetchData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchData(country);\n\n    if (data) {\n      setLoading(false);\n    }\n  });\n  var logType = logarithmic ? \"log\" : \"null\";\n\n  if (data && loading) {\n    var Xtemp = [];\n    var Y1temp = [],\n        Y2temp = [],\n        Y3temp = [],\n        Y4temp = [];\n\n    for (var key in data) {\n      Xtemp.push(key);\n      Y1temp.push(data[key].confirmed);\n      Y2temp.push(data[key].deaths);\n      Y3temp.push(data[key].recovered);\n    }\n\n    if (Xtemp.length > 1) {\n      setX(Xtemp);\n      setY1(Y1temp);\n      setY2(Y2temp);\n      setY3(Y3temp);\n\n      for (var i = 0; i < Xtemp.length; i++) {\n        Y4temp.push(Y1temp[i + 1] - Y1temp[i]);\n      }\n\n      setY4(Y4temp);\n      setLoading(false);\n    }\n  }\n\n  if (!loading) {\n    var trace1 = {\n      x: X,\n      y: Y1,\n      type: \"scatter\",\n      name: \"Confirmed\"\n    };\n    var trace2 = {\n      x: X,\n      y: Y2,\n      type: \"scatter\",\n      name: \"Deaths\"\n    };\n    var trace3 = {\n      x: X,\n      y: Y3,\n      type: \"scatter\",\n      name: \"Recovered\"\n    };\n    var bar = {\n      x: X,\n      y: Y4,\n      type: \"bar\",\n      name: \"New Cases\"\n    };\n    var plotData = [trace1, trace2, trace3, bar];\n    return React.createElement(\"div\", {\n      className: \"padded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn toggler\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"custom-control custom-switch \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      class: \"custom-control-input\",\n      onClick: function onClick() {\n        return _this.handleSwitch();\n      },\n      id: \"switch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      class: \"custom-control-label\",\n      for: \"switch\",\n      style: {\n        color: \"#99aab5\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"logarithmic\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Plot, {\n      data: plotData,\n      layout: {\n        modebar: {\n          bgcolor: \"rgba(255,255,255,0)\"\n        },\n        title: \"\".concat(dictionary[country]),\n        font: {\n          color: \"#99aab5\",\n          size: 12\n        },\n        xaxis: {\n          title: \"Date\",\n          nticks: 15\n        },\n        yaxis: {\n          title: \"Number\",\n          type: logType\n        },\n        plot_bgcolor: \"#161616\",\n        paper_bgcolor: \"#161616\",\n        autosize: true\n      },\n      useResizeHandler: true,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      config: {\n        modeBarButtonsToRemove: [\"toggleSpikelines\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"select2d\", \"lasso2d\"],\n        displaylogo: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    country: state.data.country\n  };\n};\n\nexport default connect(mapStateToProps, null)(CountryInfo);","map":{"version":3,"sources":["/home/moe/Development/corona/covid19-dashboard/src/components/CountryInfo.js"],"names":["React","useState","useEffect","Loading","Plot","countryData","connect","axios","dictionary","instance","create","baseURL","loading","CountryInfo","country","data","setData","setLoading","X","setX","Y1","setY1","Y2","setY2","Y3","setY3","Y4","setY4","logarithmic","setLogarithmic","handleSwitch","fetchData","get","response","result","console","log","error","logType","Xtemp","Y1temp","Y2temp","Y3temp","Y4temp","key","push","confirmed","deaths","recovered","length","i","trace1","x","y","type","name","trace2","trace3","bar","plotData","color","modebar","bgcolor","title","font","size","xaxis","nticks","yaxis","plot_bgcolor","paper_bgcolor","autosize","width","height","modeBarButtonsToRemove","displaylogo","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Loading from \"./Loading\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\n\nconst dictionary = countryData[4];\n\nconst instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n  loading: true,\n});\n\nconst CountryInfo = ({ country }) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [X, setX] = useState([]);\n  const [Y1, setY1] = useState([]);\n  const [Y2, setY2] = useState([]);\n  const [Y3, setY3] = useState([]);\n  const [Y4, setY4] = useState([]);\n  const [logarithmic, setLogarithmic] = useState(false);\n\n  const handleSwitch = () => {\n    setLogarithmic(!logarithmic);\n  };\n\n  const fetchData = async (country) => {\n    try {\n      let response = await instance.get(`country/${country}`);\n      let countryData = response.data.result;\n      if (loading) {\n        setData(countryData);\n        setLoading(false);\n      }\n\n      console.log(countryData[\"2020-03-22\"]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    fetchData(country);\n    if (data) {\n      setLoading(false);\n    }\n  });\n\n  let logType = logarithmic ? \"log\" : \"null\";\n\n  if (data && loading) {\n    var Xtemp = [];\n    var Y1temp = [],\n      Y2temp = [],\n      Y3temp = [],\n      Y4temp = [];\n    for (var key in data) {\n      Xtemp.push(key);\n      Y1temp.push(data[key].confirmed);\n      Y2temp.push(data[key].deaths);\n      Y3temp.push(data[key].recovered);\n    }\n    if (Xtemp.length > 1) {\n      setX(Xtemp);\n      setY1(Y1temp);\n      setY2(Y2temp);\n      setY3(Y3temp);\n      for (let i = 0; i < Xtemp.length; i++) {\n        Y4temp.push(Y1temp[i + 1] - Y1temp[i]);\n      }\n      setY4(Y4temp);\n      setLoading(false);\n    }\n  }\n\n  if (!loading) {\n    const trace1 = { x: X, y: Y1, type: \"scatter\", name: \"Confirmed\" };\n    const trace2 = { x: X, y: Y2, type: \"scatter\", name: \"Deaths\" };\n    const trace3 = { x: X, y: Y3, type: \"scatter\", name: \"Recovered\" };\n    const bar = { x: X, y: Y4, type: \"bar\", name: \"New Cases\" };\n    const plotData = [trace1, trace2, trace3, bar];\n\n    return (\n      <div className=\"padded\">\n        <div className=\"btn toggler\">\n          <div class=\"custom-control custom-switch \">\n            <input\n              type=\"checkbox\"\n              class=\"custom-control-input\"\n              onClick={() => this.handleSwitch()}\n              id=\"switch\"\n            />\n\n            <label\n              class=\"custom-control-label\"\n              for=\"switch\"\n              style={{ color: \"#99aab5\" }}\n            >\n              logarithmic\n            </label>\n          </div>\n        </div>\n        <div>\n          <Plot\n            data={plotData}\n            layout={{\n              modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n              title: `${dictionary[country]}`,\n              font: { color: \"#99aab5\", size: 12 },\n              xaxis: { title: \"Date\", nticks: 15 },\n              yaxis: { title: \"Number\", type: logType },\n              plot_bgcolor: \"#161616\",\n              paper_bgcolor: \"#161616\",\n              autosize: true,\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            config={{\n              modeBarButtonsToRemove: [\n                \"toggleSpikelines\",\n                \"zoomIn2d\",\n                \"zoomOut2d\",\n                \"autoScale2d\",\n                \"hoverClosestCartesian\",\n                \"hoverCompareCartesian\",\n                \"select2d\",\n                \"lasso2d\",\n              ],\n              displaylogo: false,\n            }}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Loading />\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    country: state.data.country,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(CountryInfo);\n"]},"metadata":{},"sourceType":"module"}