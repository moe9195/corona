{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _resizeObserverPolyfill = require('resize-observer-polyfill');\n\nvar _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill);\n\nvar _utils = require('./utils');\n\nvar util = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar eitherStringOrInteger = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]);\n\nvar ReactBootstrapToggle = function (_Component) {\n  _inherits(ReactBootstrapToggle, _Component);\n\n  function ReactBootstrapToggle() {\n    _classCallCheck(this, ReactBootstrapToggle);\n\n    var _this = _possibleConstructorReturn(this, (ReactBootstrapToggle.__proto__ || Object.getPrototypeOf(ReactBootstrapToggle)).call(this));\n\n    _this.state = {\n      width: null,\n      height: null\n    };\n    _this.resizeObserver = null;\n    _this.onClick = _this.onClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactBootstrapToggle, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.width && this.props.height) {\n        return;\n      }\n\n      this.setDimensions();\n\n      if (this.props.recalculateOnResize) {\n        this.resizeObserver = new _resizeObserverPolyfill2.default(function (ent, obs) {\n          _this2.setDimensions();\n        });\n        this.resizeObserver.observe(this.parent);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.width && this.props.height) {\n        return;\n      }\n\n      this.setDimensions();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // shutdown listener\n      if (this.resizeObserver) {\n        this.resizeObserver.unobserve(this.parent);\n      }\n    }\n  }, {\n    key: 'onClick',\n    value: function onClick(evt) {\n      if (this.props.disabled) return;\n\n      if (typeof this.props.onClick === 'function') {\n        this.props.onClick(!this.props.active, this.parent, evt);\n      }\n    }\n  }, {\n    key: 'setDimensions',\n    value: function setDimensions() {\n      var onDim = util.getDimension(this.on);\n      var offDim = util.getDimension(this.off);\n      var width = Math.max(onDim.width, offDim.width);\n      var height = Math.max(onDim.height, offDim.height); // Check if the sizes are the same with a margin of error of one pixel\n\n      var areAlmostTheSame = util.compareWithMarginOfError(this.state.width, width, this.props.width) && util.compareWithMarginOfError(this.state.height, height, this.props.height); // if they are the same then return\n\n      if (areAlmostTheSame) {\n        return;\n      }\n\n      this.setState({\n        width: this.props.width || width,\n        height: this.props.height || height\n      });\n    }\n  }, {\n    key: 'getSizeClass',\n    value: function getSizeClass() {\n      if (this.props.size === 'lg') return 'btn-lg';\n      if (this.props.size === 'sm') return 'btn-sm';\n      if (this.props.size === 'xs') return 'btn-xs';\n      return 'btn-md';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cn,\n          _this3 = this;\n\n      var _props = this.props,\n          active = _props.active,\n          onClick = _props.onClick,\n          onstyle = _props.onstyle,\n          onClassName = _props.onClassName,\n          offstyle = _props.offstyle,\n          offClassName = _props.offClassName,\n          handlestyle = _props.handlestyle,\n          handleClassName = _props.handleClassName,\n          style = _props.style,\n          on = _props.on,\n          off = _props.off,\n          className = _props.className,\n          disabled = _props.disabled,\n          width = _props.width,\n          height = _props.height,\n          recalculateOnResize = _props.recalculateOnResize,\n          props = _objectWithoutProperties(_props, ['active', 'onClick', 'onstyle', 'onClassName', 'offstyle', 'offClassName', 'handlestyle', 'handleClassName', 'style', 'on', 'off', 'className', 'disabled', 'width', 'height', 'recalculateOnResize']);\n\n      var sizeClass = this.getSizeClass();\n      var s = {\n        width: this.state.width || width,\n        height: this.state.height || height\n      };\n      return (// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n        _react2.default.createElement('div', _extends({\n          role: 'button',\n          disabled: disabled,\n          className: (0, _classnames2.default)('btn', 'toggle', className, sizeClass, (_cn = {}, _defineProperty(_cn, 'off btn-' + offstyle, !this.props.active), _defineProperty(_cn, 'btn-' + onstyle, this.props.active), _cn)),\n          onClick: this.onClick,\n          style: Object.assign({}, s, style)\n        }, props, {\n          ref: function ref(c) {\n            _this3.parent = c;\n          }\n        }), _react2.default.createElement('div', {\n          className: 'toggle-group'\n        }, _react2.default.createElement('span', {\n          ref: function ref(onLabel) {\n            _this3.on = onLabel;\n          },\n          className: (0, _classnames2.default)('btn toggle-on', sizeClass, onClassName, _defineProperty({}, 'btn-' + onstyle, onstyle)),\n          disabled: disabled\n        }, on), _react2.default.createElement('span', {\n          ref: function ref(offLabel) {\n            _this3.off = offLabel;\n          },\n          className: (0, _classnames2.default)('btn toggle-off', sizeClass, offClassName, _defineProperty({}, 'btn-' + offstyle, offstyle)),\n          disabled: disabled\n        }, off), _react2.default.createElement('span', {\n          disabled: disabled,\n          className: (0, _classnames2.default)('toggle-handle btn', sizeClass, handleClassName, _defineProperty({}, 'btn-' + handlestyle, handlestyle))\n        })))\n      );\n    }\n  }]);\n\n  return ReactBootstrapToggle;\n}(_react.Component);\n\nReactBootstrapToggle.propTypes = {\n  style: _propTypes2.default.shape(),\n  // Holds the className for label one\n  onstyle: _propTypes2.default.string,\n  // additional className for the on component\n  onClassName: _propTypes2.default.string,\n  // Holds the className for label two\n  offstyle: _propTypes2.default.string,\n  // additional className for the off component\n  offClassName: _propTypes2.default.string,\n  // The className for the handle\n  handlestyle: _propTypes2.default.string,\n  // additional className for the handle component\n  handleClassName: _propTypes2.default.string,\n  // Height prop\n  height: eitherStringOrInteger,\n  // Width prop\n  width: eitherStringOrInteger,\n  // The on and off elements defaults to 'On' and 'Off'\n  on: _propTypes2.default.node,\n  off: _propTypes2.default.node,\n  // The initial state of the component\n  active: _propTypes2.default.bool,\n  // Sets the button to disabled\n  disabled: _propTypes2.default.bool,\n  // Set the size of the button defaults to normal\n  size: _propTypes2.default.string,\n  // The onClick event, returns the state as the argument\n  onClick: _propTypes2.default.func,\n  className: _propTypes2.default.string,\n  // If the toggle should recalculate it's dimensions when visibility or dimensions change\n  recalculateOnResize: _propTypes2.default.bool\n};\nReactBootstrapToggle.defaultProps = {\n  onstyle: 'primary',\n  onClassName: '',\n  offstyle: 'default',\n  offClassName: '',\n  handlestyle: 'default',\n  handleClassName: '',\n  width: '',\n  height: '',\n  on: 'On',\n  off: 'Off',\n  disabled: false,\n  size: 'normal',\n  active: true,\n  style: {},\n  recalculateOnResize: false\n};\nexports.default = ReactBootstrapToggle;","map":null,"metadata":{},"sourceType":"script"}