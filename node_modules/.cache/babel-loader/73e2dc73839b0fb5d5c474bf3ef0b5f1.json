{"ast":null,"code":"import _regeneratorRuntime from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/moe/Development/corona/covid19-dashboard/src/components/CountryInfo.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport arabicdictionaries from \"./arabicCountries\";\nimport translate from \"./translation\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nvar dictionary = countryData[4];\nvar arabicdictionary = arabicdictionaries[0];\nvar instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n  loading: true\n});\n\nvar CountryInfo = function CountryInfo(_ref) {\n  var country = _ref.country,\n      global = _ref.global,\n      language = _ref.language;\n\n  var _useState = useState(global),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      X = _useState6[0],\n      setX = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      Y1 = _useState8[0],\n      setY1 = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      Y2 = _useState10[0],\n      setY2 = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      Y3 = _useState12[0],\n      setY3 = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      Y4 = _useState14[0],\n      setY4 = _useState14[1];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      Y5 = _useState16[0],\n      setY5 = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      Y6 = _useState18[0],\n      setY6 = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      logarithmic = _useState20[0],\n      setLogarithmic = _useState20[1];\n\n  var _useState21 = useState(\"Confirmed\"),\n      _useState22 = _slicedToArray(_useState21, 2),\n      selector = _useState22[0],\n      setSelector = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      show = _useState24[0],\n      setShow = _useState24[1];\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  var handleSwitch = function handleSwitch() {\n    setLogarithmic(!logarithmic);\n  };\n\n  var handleOnClick = function handleOnClick(selected) {\n    setSelector(selected);\n  };\n\n  var fetchData =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(country) {\n      var response, _countryData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return instance.get(\"country/\".concat(country));\n\n            case 3:\n              response = _context.sent;\n              _countryData = response.data.result;\n              setData(_countryData);\n              console.log(data[\"2020-03-22\"]);\n              setLoading(true);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 10]]);\n    }));\n\n    return function fetchData(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchData(country);\n  }, [country]);\n  var logType = logarithmic ? \"log\" : \"null\";\n\n  if (data && loading) {\n    var Xtemp = [];\n    var Y1temp = [],\n        Y2temp = [],\n        Y3temp = [],\n        Y4temp = [],\n        Y5temp = [],\n        Y6temp = [];\n\n    for (var key in data) {\n      Xtemp.push(key);\n      Y1temp.push(data[key].confirmed);\n      Y2temp.push(data[key].deaths);\n      Y3temp.push(data[key].recovered);\n    }\n\n    if (Xtemp.length > 1) {\n      setX(Xtemp);\n      setY1(Y1temp);\n      setY2(Y2temp);\n      setY3(Y3temp);\n\n      for (var i = 0; i < Xtemp.length; i++) {\n        Y4temp.push(Y1temp[i + 1] - Y1temp[i]);\n        Y5temp.push(Y2temp[i + 1] - Y2temp[i]);\n        Y6temp.push(Y3temp[i + 1] - Y3temp[i]);\n      }\n\n      setY4(Y4temp);\n      setY5(Y5temp);\n      setY6(Y6temp);\n      setLoading(false);\n    }\n  }\n\n  if (!loading) {\n    var trace1 = {\n      x: X,\n      y: Y1,\n      type: \"scatter\",\n      name: \"Confirmed\",\n      mode: \"lines+markers\",\n      line: {\n        color: \"#ff0000\"\n      },\n      marker: {\n        color: \"#ff0000\"\n      }\n    };\n    var trace2 = {\n      x: X,\n      y: Y2,\n      type: \"scatter\",\n      name: \"Deaths\",\n      mode: \"lines+markers\",\n      line: {\n        color: \"#ff0000\"\n      },\n      marker: {\n        color: \"#ff0000\"\n      }\n    };\n    var trace3 = {\n      x: X,\n      y: Y3,\n      type: \"scatter\",\n      mode: \"lines+markers\",\n      line: {\n        color: \"#ff0000\"\n      },\n      marker: {\n        color: \"#ff0000\"\n      }\n    };\n    var bar1 = {\n      x: X,\n      y: Y4,\n      type: \"bar\",\n      name: language ? \"Confirmed\" : translate[\"Confirmed\"],\n      line: {\n        color: \"blue\"\n      },\n      marker: {\n        color: \"blue\"\n      }\n    };\n    var bar2 = {\n      x: X,\n      y: Y5,\n      type: \"bar\",\n      name: language ? \"Deaths\" : translate[\"Deaths\"],\n      line: {\n        color: \"red\"\n      },\n      marker: {\n        color: \"red\"\n      }\n    };\n    var bar3 = {\n      x: X,\n      y: Y6,\n      type: \"bar\",\n      name: \"New Recovered\",\n      line: {\n        color: \"yellow\"\n      },\n      marker: {\n        color: \"yellow\"\n      }\n    };\n    var plotData = [[trace1], [trace2], [trace3], [bar1, bar3, bar2]];\n    var selectors = [\"Confirmed\", \"Deaths\", \"Recovered\", \"Daily Increase\"];\n    var buttons = selectors.map(function (type) {\n      return React.createElement(\"button\", {\n        className: selector === type ? \"btn btn-outline-dark clicked\" : \"btn btn-outline-dark\",\n        style: {\n          padding: \"0vh 2vw 0vh 2vw\"\n        },\n        onClick: function onClick() {\n          return handleOnClick(type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \" \", React.createElement(\"div\", {\n        className: \"button-fonts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \" \", language ? type : translate[type]));\n    });\n    var select = selector === \"Confirmed\" ? 0 : selector === \"Deaths\" ? 1 : selector === \"Recovered\" ? 2 : selector === \"Daily Increase\" ? 3 : null;\n    return React.createElement(\"div\", {\n      className: \"padded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"buttons-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row button-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card help-card\",\n      style: {\n        width: \"5%\",\n        textAlign: \"left\",\n        paddingLeft: \"0.7rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \" \", React.createElement(FontAwesomeIcon, {\n      onClick: handleShow,\n      icon: faQuestionCircle,\n      size: \"1x\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        width: \"95%\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, buttons, React.createElement(\"button\", {\n      className: logarithmic ? \"btn btn-outline-dark clicked\" : \"btn btn-outline-dark\",\n      style: {\n        padding: \"0vh 1.8vw 0vh 1.8vw\"\n      },\n      onClick: function onClick() {\n        return handleSwitch();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \" \", React.createElement(\"div\", {\n      className: \"button-fonts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \" \", language ? \"Logarithmic\" : \"لوغاريتمي\"))))), React.createElement(Modal, {\n      show: show,\n      onHide: handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, language ? \"Country Specific Time Graph\" : \"رسم بياني زمني محدد لكل بلد\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, language ? \"This time graph shows the number of confirmed cases, total deaths, and daily increase for each country. It initially shows the numbers for the entire world, but you can select a specific country by clicking on it on the map. You can also click the logarithmic button to switch from a linear to a logarithmic scale.\" : \"يوضح هذا الرسم البياني الزمني عدد الحالات المؤكدة وإجمالي الوفيات والزيادة اليومية لكل بلد. يعرض في البداية أرقامًا للعالم بأكمله ، ولكن يمكنك تحديد بلد معين من خلال النقر عليه على الخريطة. يمكنك أيضًا النقر فوق الزر اللوغاريتمي للتبديل من مقياس خطي إلى مقياس لوغاريتمي.\")), React.createElement(Plot, {\n      data: plotData[select],\n      layout: {\n        modebar: {\n          bgcolor: \"rgba(255,255,255,0)\"\n        },\n        title: !country && language ? \"Global\" : !country && !language ? \"العالم\" : country && language ? \"\".concat(dictionary[country]) : \"\".concat(arabicdictionary[country]),\n        font: {\n          color: \"#e1e5e8\",\n          size: 12\n        },\n        xaxis: {\n          nticks: 15\n        },\n        yaxis: {\n          type: logType\n        },\n        margin: {\n          l: 40,\n          r: 20,\n          t: 50,\n          b: 40,\n          pad: 0\n        },\n        plot_bgcolor: \"#191d20\",\n        paper_bgcolor: \"#191d20\",\n        height: 405,\n        autosize: true,\n        barmode: \"overlay\"\n      },\n      useResizeHandler: true,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      config: {\n        modeBarButtonsToRemove: [\"toggleSpikelines\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"select2d\", \"lasso2d\"],\n        displaylogo: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Click on a country from the map\");\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    country: state.data.country\n  };\n};\n\nexport default connect(mapStateToProps, null)(CountryInfo);","map":{"version":3,"sources":["/home/moe/Development/corona/covid19-dashboard/src/components/CountryInfo.js"],"names":["React","useState","useEffect","useCallback","Plot","countryData","connect","axios","arabicdictionaries","translate","Modal","Button","faQuestionCircle","FontAwesomeIcon","dictionary","arabicdictionary","instance","create","baseURL","loading","CountryInfo","country","global","language","data","setData","setLoading","X","setX","Y1","setY1","Y2","setY2","Y3","setY3","Y4","setY4","Y5","setY5","Y6","setY6","logarithmic","setLogarithmic","selector","setSelector","show","setShow","handleClose","handleShow","handleSwitch","handleOnClick","selected","fetchData","get","response","result","console","log","error","logType","Xtemp","Y1temp","Y2temp","Y3temp","Y4temp","Y5temp","Y6temp","key","push","confirmed","deaths","recovered","length","i","trace1","x","y","type","name","mode","line","color","marker","trace2","trace3","bar1","bar2","bar3","plotData","selectors","buttons","map","padding","select","width","textAlign","paddingLeft","modebar","bgcolor","title","font","size","xaxis","nticks","yaxis","margin","l","r","t","b","pad","plot_bgcolor","paper_bgcolor","height","autosize","barmode","modeBarButtonsToRemove","displaylogo","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport arabicdictionaries from \"./arabicCountries\";\nimport translate from \"./translation\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nimport { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst dictionary = countryData[4];\nconst arabicdictionary = arabicdictionaries[0];\n\nconst instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\",\n  loading: true\n});\n\nconst CountryInfo = ({ country, global, language }) => {\n  const [data, setData] = useState(global);\n  const [loading, setLoading] = useState(true);\n  const [X, setX] = useState([]);\n  const [Y1, setY1] = useState([]);\n  const [Y2, setY2] = useState([]);\n  const [Y3, setY3] = useState([]);\n  const [Y4, setY4] = useState([]);\n  const [Y5, setY5] = useState([]);\n  const [Y6, setY6] = useState([]);\n  const [logarithmic, setLogarithmic] = useState(false);\n  const [selector, setSelector] = useState(\"Confirmed\");\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleSwitch = () => {\n    setLogarithmic(!logarithmic);\n  };\n\n  const handleOnClick = selected => {\n    setSelector(selected);\n  };\n\n  const fetchData = async country => {\n    try {\n      let response = await instance.get(`country/${country}`);\n      let countryData = response.data.result;\n      setData(countryData);\n      console.log(data[\"2020-03-22\"]);\n      setLoading(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(\n    () => {\n      fetchData(country);\n    },\n    [country]\n  );\n\n  let logType = logarithmic ? \"log\" : \"null\";\n\n  if (data && loading) {\n    var Xtemp = [];\n    var Y1temp = [],\n      Y2temp = [],\n      Y3temp = [],\n      Y4temp = [],\n      Y5temp = [],\n      Y6temp = [];\n    for (var key in data) {\n      Xtemp.push(key);\n      Y1temp.push(data[key].confirmed);\n      Y2temp.push(data[key].deaths);\n      Y3temp.push(data[key].recovered);\n    }\n    if (Xtemp.length > 1) {\n      setX(Xtemp);\n      setY1(Y1temp);\n      setY2(Y2temp);\n      setY3(Y3temp);\n      for (let i = 0; i < Xtemp.length; i++) {\n        Y4temp.push(Y1temp[i + 1] - Y1temp[i]);\n        Y5temp.push(Y2temp[i + 1] - Y2temp[i]);\n        Y6temp.push(Y3temp[i + 1] - Y3temp[i]);\n      }\n      setY4(Y4temp);\n      setY5(Y5temp);\n      setY6(Y6temp);\n      setLoading(false);\n    }\n  }\n\n  if (!loading) {\n    const trace1 = {\n      x: X,\n      y: Y1,\n      type: \"scatter\",\n      name: \"Confirmed\",\n      mode: \"lines+markers\",\n      line: { color: \"#ff0000\" },\n      marker: { color: \"#ff0000\" }\n    };\n    const trace2 = {\n      x: X,\n      y: Y2,\n      type: \"scatter\",\n      name: \"Deaths\",\n      mode: \"lines+markers\",\n      line: { color: \"#ff0000\" },\n      marker: { color: \"#ff0000\" }\n    };\n    const trace3 = {\n      x: X,\n      y: Y3,\n      type: \"scatter\",\n\n      mode: \"lines+markers\",\n      line: { color: \"#ff0000\" },\n      marker: { color: \"#ff0000\" }\n    };\n    const bar1 = {\n      x: X,\n      y: Y4,\n      type: \"bar\",\n      name: language ? \"Confirmed\" : translate[\"Confirmed\"],\n      line: { color: \"blue\" },\n      marker: { color: \"blue\" }\n    };\n\n    const bar2 = {\n      x: X,\n      y: Y5,\n      type: \"bar\",\n      name: language ? \"Deaths\" : translate[\"Deaths\"],\n      line: { color: \"red\" },\n      marker: { color: \"red\" }\n    };\n\n    const bar3 = {\n      x: X,\n      y: Y6,\n      type: \"bar\",\n      name: \"New Recovered\",\n\n      line: { color: \"yellow\" },\n      marker: { color: \"yellow\" }\n    };\n\n    const plotData = [[trace1], [trace2], [trace3], [bar1, bar3, bar2]];\n\n    const selectors = [\"Confirmed\", \"Deaths\", \"Recovered\", \"Daily Increase\"];\n\n    const buttons = selectors.map(type => (\n      <button\n        className={\n          selector === type\n            ? \"btn btn-outline-dark clicked\"\n            : \"btn btn-outline-dark\"\n        }\n        style={{ padding: \"0vh 2vw 0vh 2vw\" }}\n        onClick={() => handleOnClick(type)}\n      >\n        {\" \"}\n        <div className=\"button-fonts\"> {language ? type : translate[type]}</div>\n      </button>\n    ));\n    let select =\n      selector === \"Confirmed\"\n        ? 0\n        : selector === \"Deaths\"\n        ? 1\n        : selector === \"Recovered\"\n        ? 2\n        : selector === \"Daily Increase\"\n        ? 3\n        : null;\n    return (\n      <div className=\"padded\">\n        <div className=\"buttons-header\">\n          <div className=\"row button-header\">\n            <div\n              className=\"card help-card\"\n              style={{ width: \"5%\", textAlign: \"left\", paddingLeft: \"0.7rem\" }}\n            >\n              {\" \"}\n              <FontAwesomeIcon\n                onClick={handleShow}\n                icon={faQuestionCircle}\n                size=\"1x\"\n              />\n            </div>\n            <div style={{ width: \"95%\", textAlign: \"center\" }}>\n              {buttons}\n              <button\n                className={\n                  logarithmic\n                    ? \"btn btn-outline-dark clicked\"\n                    : \"btn btn-outline-dark\"\n                }\n                style={{ padding: \"0vh 1.8vw 0vh 1.8vw\" }}\n                onClick={() => handleSwitch()}\n              >\n                {\" \"}\n                <div className=\"button-fonts\">\n                  {\" \"}\n                  {language ? \"Logarithmic\" : \"لوغاريتمي\"}\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {language\n                ? \"Country Specific Time Graph\"\n                : \"رسم بياني زمني محدد لكل بلد\"}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {language\n              ? \"This time graph shows the number of confirmed cases, total deaths, and daily increase for each country. It initially shows the numbers for the entire world, but you can select a specific country by clicking on it on the map. You can also click the logarithmic button to switch from a linear to a logarithmic scale.\"\n              : \"يوضح هذا الرسم البياني الزمني عدد الحالات المؤكدة وإجمالي الوفيات والزيادة اليومية لكل بلد. يعرض في البداية أرقامًا للعالم بأكمله ، ولكن يمكنك تحديد بلد معين من خلال النقر عليه على الخريطة. يمكنك أيضًا النقر فوق الزر اللوغاريتمي للتبديل من مقياس خطي إلى مقياس لوغاريتمي.\"}\n          </Modal.Body>\n        </Modal>\n\n        <Plot\n          data={plotData[select]}\n          layout={{\n            modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n            title:\n              !country && language\n                ? \"Global\"\n                : !country && !language\n                ? \"العالم\"\n                : country && language\n                ? `${dictionary[country]}`\n                : `${arabicdictionary[country]}`,\n            font: { color: \"#e1e5e8\", size: 12 },\n            xaxis: { nticks: 15 },\n            yaxis: { type: logType },\n            margin: { l: 40, r: 20, t: 50, b: 40, pad: 0 },\n            plot_bgcolor: \"#191d20\",\n            paper_bgcolor: \"#191d20\",\n            height: 405,\n            autosize: true,\n            barmode: \"overlay\"\n          }}\n          useResizeHandler={true}\n          style={{ width: \"100%\", height: \"100%\" }}\n          config={{\n            modeBarButtonsToRemove: [\n              \"toggleSpikelines\",\n              \"zoomIn2d\",\n              \"zoomOut2d\",\n              \"autoScale2d\",\n              \"hoverClosestCartesian\",\n              \"hoverCompareCartesian\",\n              \"select2d\",\n              \"lasso2d\"\n            ],\n            displaylogo: false\n          }}\n        />\n      </div>\n    );\n  } else {\n    return <div>Click on a country from the map</div>;\n  }\n};\nconst mapStateToProps = state => {\n  return {\n    country: state.data.country\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(CountryInfo);\n"]},"metadata":{},"sourceType":"module"}