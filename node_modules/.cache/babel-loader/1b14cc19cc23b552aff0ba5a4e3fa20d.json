{"ast":null,"code":"var _jsxFileName = \"/home/moe/Development/corona/covid19-dashboard/src/components/MapChart.js\";\nimport React, { useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nimport { connect } from \"react-redux\";\nimport { setCountry as _setCountry } from \"../redux/actions\";\nvar reverseDict = countryData[5];\n\nvar MapChart = function MapChart(_ref) {\n  var loading = _ref.loading,\n      data = _ref.data,\n      region = _ref.region,\n      language = _ref.language,\n      setCountry = _ref.setCountry;\n\n  var handleClick = function handleClick(pointData) {\n    var data = pointData.points[0];\n    var index = data.pointIndex;\n    var location = pointData.points[0].data.locations[index];\n    setCountry(location);\n  };\n\n  var confirmedList = [],\n      countryNames = [];\n  data.map(function (country) {\n    confirmedList.push(country.confirmed);\n    countryNames.push(reverseDict[country.name]);\n  });\n  var scaledData = confirmedList.map(function (num) {\n    return region ? Math.pow(num, 0.3) : num / 50;\n  });\n  var plotdata = [{\n    type: \"scattergeo\",\n    mode: \"markers\",\n    locations: countryNames,\n    hoverinfo: \"text, label\",\n    text: confirmedList,\n    marker: {\n      size: scaledData,\n      color: \"rgba(255,0,0,0.75)\",\n      sizeref: 1,\n      line: {\n        color: \"black\"\n      }\n    },\n    name: \"europe data\"\n  }];\n\n  if (loading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Plot, {\n    data: plotdata,\n    layout: region ? {\n      modebar: {\n        bgcolor: \"rgba(255,255,255,0)\"\n      },\n      geo: {\n        scope: \"World\",\n        resolution: \"200\",\n        showland: true,\n        landcolor: \"#0f1316\",\n        showframe: true,\n        bgcolor: \"#0f1316\",\n        showcountries: true,\n        showocean: true,\n        oceancolor: \"#030217\" //   projection: { type: \"orthographic\" },\n\n      },\n      height: \"420\",\n      border: \"solid\",\n      margin: {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 0,\n        pad: 0\n      },\n      plot_bgcolor: \"rgba(0,0,0,0)\",\n      paper_bgcolor: \"rgba(0,0,0,0)\",\n      autosize: true\n    } : {\n      modebar: {\n        bgcolor: \"rgba(255,255,255,0)\"\n      },\n      geo: {\n        scope: \"World\",\n        resolution: \"200\",\n        showland: true,\n        landcolor: \"#0f1316\",\n        showframe: true,\n        bgcolor: \"#0f1316\",\n        showcountries: true,\n        showocean: true,\n        oceancolor: \"#030217\",\n        lonaxis: {\n          range: [-19, 61]\n        },\n        lataxis: {\n          range: [7, 47]\n        }\n      },\n      height: \"420\",\n      border: \"solid\",\n      margin: {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 0,\n        pad: 0\n      },\n      plot_bgcolor: \"rgba(0,0,0,0)\",\n      paper_bgcolor: \"rgba(0,0,0,0)\",\n      autosize: true\n    },\n    useResizeHandler: true,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    onClick: function onClick(data) {\n      return handleClick(data);\n    },\n    config: {\n      modeBarButtonsToRemove: [\"toggleSpikelines\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"select2d\", \"lasso2d\", \"hoverClosestGeo\", \"zoomInGeo\", \"zoomOutGeo\"],\n      displaylogo: false // onClick={(data) => handleShow(data)}\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setCountry: function setCountry(country) {\n      return dispatch(_setCountry(country));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(MapChart);","map":{"version":3,"sources":["/home/moe/Development/corona/covid19-dashboard/src/components/MapChart.js"],"names":["React","useState","Plot","countryData","Loading","connect","setCountry","reverseDict","MapChart","loading","data","region","language","handleClick","pointData","points","index","pointIndex","location","locations","confirmedList","countryNames","map","country","push","confirmed","name","scaledData","num","Math","pow","plotdata","type","mode","hoverinfo","text","marker","size","color","sizeref","line","modebar","bgcolor","geo","scope","resolution","showland","landcolor","showframe","showcountries","showocean","oceancolor","height","border","margin","l","r","t","b","pad","plot_bgcolor","paper_bgcolor","autosize","lonaxis","range","lataxis","width","modeBarButtonsToRemove","displaylogo","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nimport { connect } from \"react-redux\";\nimport { setCountry } from \"../redux/actions\";\n\nconst reverseDict = countryData[5];\n\nconst MapChart = ({ loading, data, region, language, setCountry }) => {\n  const handleClick = pointData => {\n    let data = pointData.points[0];\n    let index = data.pointIndex;\n    let location = pointData.points[0].data.locations[index];\n    setCountry(location);\n  };\n\n  let confirmedList = [],\n    countryNames = [];\n  data.map(country => {\n    confirmedList.push(country.confirmed);\n    countryNames.push(reverseDict[country.name]);\n  });\n\n  let scaledData = confirmedList.map(num =>\n    region ? Math.pow(num, 0.3) : num / 50\n  );\n  let plotdata = [\n    {\n      type: \"scattergeo\",\n      mode: \"markers\",\n      locations: countryNames,\n      hoverinfo: \"text, label\",\n      text: confirmedList,\n      marker: {\n        size: scaledData,\n        color: \"rgba(255,0,0,0.75)\",\n        sizeref: 1,\n        line: {\n          color: \"black\"\n        }\n      },\n      name: \"europe data\"\n    }\n  ];\n  if (loading) {\n    return <Loading />;\n  }\n  return (\n    <div>\n      <Plot\n        data={plotdata}\n        layout={\n          region\n            ? {\n                modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n                geo: {\n                  scope: \"World\",\n                  resolution: \"200\",\n                  showland: true,\n                  landcolor: \"#0f1316\",\n                  showframe: true,\n                  bgcolor: \"#0f1316\",\n                  showcountries: true,\n                  showocean: true,\n                  oceancolor: \"#030217\"\n                  //   projection: { type: \"orthographic\" },\n                },\n                height: \"420\",\n                border: \"solid\",\n                margin: { l: 0, r: 0, t: 0, b: 0, pad: 0 },\n                plot_bgcolor: \"rgba(0,0,0,0)\",\n                paper_bgcolor: \"rgba(0,0,0,0)\",\n                autosize: true\n              }\n            : {\n                modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n                geo: {\n                  scope: \"World\",\n                  resolution: \"200\",\n                  showland: true,\n                  landcolor: \"#0f1316\",\n                  showframe: true,\n                  bgcolor: \"#0f1316\",\n                  showcountries: true,\n                  showocean: true,\n                  oceancolor: \"#030217\",\n                  lonaxis: { range: [-19, 61] },\n                  lataxis: { range: [7, 47] }\n                },\n                height: \"420\",\n                border: \"solid\",\n                margin: { l: 0, r: 0, t: 0, b: 0, pad: 0 },\n                plot_bgcolor: \"rgba(0,0,0,0)\",\n                paper_bgcolor: \"rgba(0,0,0,0)\",\n                autosize: true\n              }\n        }\n        useResizeHandler={true}\n        style={{ width: \"100%\", height: \"100%\" }}\n        onClick={data => handleClick(data)}\n        config={\n          {\n            modeBarButtonsToRemove: [\n              \"toggleSpikelines\",\n              \"autoScale2d\",\n              \"hoverClosestCartesian\",\n              \"hoverCompareCartesian\",\n              \"select2d\",\n              \"lasso2d\",\n              \"hoverClosestGeo\",\n              \"zoomInGeo\",\n              \"zoomOutGeo\"\n            ],\n            displaylogo: false\n          } // onClick={(data) => handleShow(data)}\n        }\n      />\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setCountry: country => dispatch(setCountry(country))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(MapChart);\n"]},"metadata":{},"sourceType":"module"}