{"ast":null,"code":"import _classCallCheck from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/moe/Development/corona/covid19-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/moe/Development/corona/covid19-dashboard/src/components/TimeGraph.js\";\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport colormap from \"colormap\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nimport translate from \"./translation\";\nimport arabicdictionaries from \"./arabicCountries\";\nimport Toggle from \"react-bootstrap-toggle\";\nvar dictionary = arabicdictionaries[0];\nvar countries = countryData[0];\nvar countriesFull = countryData[1];\n\nvar TimeGraph =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimeGraph, _Component);\n\n  function TimeGraph() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TimeGraph);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimeGraph)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selector: \"confirmed\",\n      logarithmic: false\n    };\n\n    _this.capitalizeFirstLetter = function (string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    };\n\n    _this.setupTicks = function (arr, delta, date) {\n      var l = arr.length;\n      delta = Math.floor(l / delta);\n      var newArr = [];\n\n      for (var i = 0; i < arr.length; i = i + delta) {\n        if (date) {\n          newArr.push(_this.formatDate(arr[i]));\n        } else {\n          newArr.push(arr[i]);\n        }\n      }\n\n      return newArr;\n    };\n\n    _this.handleOnClick = function (selected) {\n      _this.setState({\n        selector: selected\n      });\n    };\n\n    _this.handleSwitch = function () {\n      _this.setState({\n        logarithmic: !_this.state.logarithmic\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TimeGraph, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selectors = [\"confirmed\", \"deaths\", \"recovered\"];\n      var buttons = selectors.map(function (type) {\n        return React.createElement(\"button\", {\n          className: _this2.state.selector === type ? \"btn btn-outline-dark clicked\" : \"btn btn-outline-dark\",\n          style: {\n            padding: \"0vh 5.5vh 0vh 5.5vh\"\n          },\n          onClick: function onClick() {\n            return _this2.handleOnClick(type);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"font\", {\n          style: {\n            fontSize: \"1.5vh\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \" \", _this2.props.language ? type : translate[type]));\n      });\n      var data = this.props.data;\n      var plotDataY = [[[]], [[]], [[]]],\n          plotDataX = [];\n\n      for (var iso in data) {\n        var countryObj = data[iso];\n        var confirmedArr = [],\n            deathsArr = [],\n            recoveredArr = [],\n            timeArr = [],\n            counter = 0,\n            dateArr = [];\n\n        for (var date in countryObj) {\n          var confirmed = countryObj[date].confirmed;\n          var deaths = countryObj[date].deaths;\n          var recovered = countryObj[date].recovered;\n          confirmedArr.push(confirmed);\n          deathsArr.push(deaths);\n          recoveredArr.push(recovered);\n          timeArr.push(counter);\n          dateArr.push(date);\n          counter++;\n        }\n\n        plotDataX.push(timeArr);\n        plotDataY[0].push(confirmedArr);\n        plotDataY[1].push(deathsArr);\n        plotDataY[2].push(recoveredArr);\n      }\n\n      var scatterData = [];\n      var select = this.state.selector === \"confirmed\" ? 0 : this.state.selector === \"deaths\" ? 1 : this.state.selector === \"recovered\" ? 2 : 3;\n\n      for (var i = 1; i < plotDataX.length + 1; i++) {\n        var trace = {\n          x: dateArr,\n          y: plotDataY[select][i],\n          type: \"scatter\",\n          name: this.props.language ? countriesFull[i - 1] : dictionary[countries[i - 1]]\n        };\n        scatterData.push(trace);\n      }\n\n      var logType = this.state.logarithmic ? \"log\" : \"null\";\n      var colorway = colormap({\n        colormap: \"jet\",\n        nshades: countries.length,\n        format: \"hex\",\n        alpha: 1\n      });\n\n      if (this.props.loading) {\n        return React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \" padded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Toggle, {\n        on: React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"ON\"),\n        off: React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"OFF\"),\n        size: \"xs\",\n        offstyle: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"btn toggler\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"custom-control custom-switch \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        class: \"custom-control-input\",\n        onClick: function onClick() {\n          return _this2.handleSwitch();\n        },\n        id: \"switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        class: \"custom-control-label\",\n        for: \"switch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"font\", {\n        style: {\n          fontSize: \"1.5vh\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \" \", this.props.language ? \"Logarithmic\" : \"لوغاريتمي\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Plot, {\n        data: scatterData,\n        layout: {\n          modebar: {\n            bgcolor: \"rgba(255,255,255,0)\"\n          },\n          font: {\n            color: \"#e1e5e8\",\n            size: 12\n          },\n          xaxis: {\n            nticks: 15\n          },\n          yaxis: {\n            type: logType\n          },\n          colorway: colorway,\n          plot_bgcolor: \"#191d20\",\n          paper_bgcolor: \"#191d20\",\n          autosize: true,\n          height: 350,\n          hovermode: \"closest\",\n          margin: {\n            l: 40,\n            r: 20,\n            t: 0,\n            b: 0,\n            pad: 0\n          },\n          legend: {\n            font: {\n              size: 10\n            },\n            bgcolor: \"transparent\",\n            xanchor: \"center\",\n            yanchor: \"top\",\n            y: -0.1,\n            x: 0.5,\n            autosize: true,\n            orientation: \"h\"\n          }\n        },\n        config: {\n          modeBarButtonsToRemove: [\"toggleSpikelines\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\"],\n          displaylogo: false\n        },\n        useResizeHandler: true,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        modeBarButtonsToRemove: [\"toImage\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TimeGraph;\n}(Component);\n\nexport default TimeGraph;","map":{"version":3,"sources":["/home/moe/Development/corona/covid19-dashboard/src/components/TimeGraph.js"],"names":["React","Component","Plot","colormap","countryData","Loading","translate","arabicdictionaries","Toggle","dictionary","countries","countriesFull","TimeGraph","state","selector","logarithmic","capitalizeFirstLetter","string","charAt","toUpperCase","slice","setupTicks","arr","delta","date","l","length","Math","floor","newArr","i","push","formatDate","handleOnClick","selected","setState","handleSwitch","selectors","buttons","map","type","padding","fontSize","props","language","data","plotDataY","plotDataX","iso","countryObj","confirmedArr","deathsArr","recoveredArr","timeArr","counter","dateArr","confirmed","deaths","recovered","scatterData","select","trace","x","y","name","logType","colorway","nshades","format","alpha","loading","modebar","bgcolor","font","color","size","xaxis","nticks","yaxis","plot_bgcolor","paper_bgcolor","autosize","height","hovermode","margin","r","t","b","pad","legend","xanchor","yanchor","orientation","modeBarButtonsToRemove","displaylogo","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport colormap from \"colormap\";\nimport countryData from \"./countries\";\nimport Loading from \"./Loading\";\nimport translate from \"./translation\";\nimport arabicdictionaries from \"./arabicCountries\";\nimport Toggle from \"react-bootstrap-toggle\";\n\nconst dictionary = arabicdictionaries[0];\nconst countries = countryData[0];\nconst countriesFull = countryData[1];\n\nclass TimeGraph extends Component {\n  state = {\n    selector: \"confirmed\",\n    logarithmic: false\n  };\n\n  capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  setupTicks = (arr, delta, date) => {\n    const l = arr.length;\n    delta = Math.floor(l / delta);\n    let newArr = [];\n    for (let i = 0; i < arr.length; i = i + delta) {\n      if (date) {\n        newArr.push(this.formatDate(arr[i]));\n      } else {\n        newArr.push(arr[i]);\n      }\n    }\n    return newArr;\n  };\n\n  handleOnClick = selected => {\n    this.setState({ selector: selected });\n  };\n  handleSwitch = () => {\n    this.setState({ logarithmic: !this.state.logarithmic });\n  };\n\n  render() {\n    const selectors = [\"confirmed\", \"deaths\", \"recovered\"];\n\n    const buttons = selectors.map(type => (\n      <button\n        className={\n          this.state.selector === type\n            ? \"btn btn-outline-dark clicked\"\n            : \"btn btn-outline-dark\"\n        }\n        style={{ padding: \"0vh 5.5vh 0vh 5.5vh\" }}\n        onClick={() => this.handleOnClick(type)}\n      >\n        <font style={{ fontSize: \"1.5vh\" }}>\n          {\" \"}\n          {this.props.language ? type : translate[type]}\n        </font>\n      </button>\n    ));\n\n    const data = this.props.data;\n    let plotDataY = [[[]], [[]], [[]]],\n      plotDataX = [];\n    for (let iso in data) {\n      let countryObj = data[iso];\n      var confirmedArr = [],\n        deathsArr = [],\n        recoveredArr = [],\n        timeArr = [],\n        counter = 0,\n        dateArr = [];\n      for (let date in countryObj) {\n        var confirmed = countryObj[date].confirmed;\n        var deaths = countryObj[date].deaths;\n        var recovered = countryObj[date].recovered;\n        confirmedArr.push(confirmed);\n        deathsArr.push(deaths);\n        recoveredArr.push(recovered);\n        timeArr.push(counter);\n        dateArr.push(date);\n        counter++;\n      }\n      plotDataX.push(timeArr);\n      plotDataY[0].push(confirmedArr);\n      plotDataY[1].push(deathsArr);\n      plotDataY[2].push(recoveredArr);\n    }\n\n    let scatterData = [];\n    let select =\n      this.state.selector === \"confirmed\"\n        ? 0\n        : this.state.selector === \"deaths\"\n        ? 1\n        : this.state.selector === \"recovered\"\n        ? 2\n        : 3;\n\n    for (let i = 1; i < plotDataX.length + 1; i++) {\n      var trace = {\n        x: dateArr,\n        y: plotDataY[select][i],\n        type: \"scatter\",\n        name: this.props.language\n          ? countriesFull[i - 1]\n          : dictionary[countries[i - 1]]\n      };\n      scatterData.push(trace);\n    }\n\n    let logType = this.state.logarithmic ? \"log\" : \"null\";\n    const colorway = colormap({\n      colormap: \"jet\",\n      nshades: countries.length,\n      format: \"hex\",\n      alpha: 1\n    });\n\n    if (this.props.loading) {\n      return <Loading />;\n    }\n    return (\n      <div className=\" padded\">\n        {/* {buttons} */}\n        <Toggle\n          on={<h2>ON</h2>}\n          off={<h2>OFF</h2>}\n          size=\"xs\"\n          offstyle=\"danger\"\n        />\n        <div className=\"btn toggler\">\n          <div class=\"custom-control custom-switch \">\n            <input\n              type=\"checkbox\"\n              class=\"custom-control-input\"\n              onClick={() => this.handleSwitch()}\n              id=\"switch\"\n            />\n            <label class=\"custom-control-label\" for=\"switch\" />\n            <font style={{ fontSize: \"1.5vh\" }}>\n              {\" \"}\n              {this.props.language ? \"Logarithmic\" : \"لوغاريتمي\"}\n            </font>\n          </div>\n        </div>\n        <div>\n          <Plot\n            data={scatterData}\n            layout={{\n              modebar: { bgcolor: \"rgba(255,255,255,0)\" },\n              font: { color: \"#e1e5e8\", size: 12 },\n              xaxis: { nticks: 15 },\n              yaxis: { type: logType },\n              colorway: colorway,\n              plot_bgcolor: \"#191d20\",\n              paper_bgcolor: \"#191d20\",\n              autosize: true,\n              height: 350,\n              hovermode: \"closest\",\n              margin: { l: 40, r: 20, t: 0, b: 0, pad: 0 },\n              legend: {\n                font: { size: 10 },\n                bgcolor: \"transparent\",\n                xanchor: \"center\",\n                yanchor: \"top\",\n                y: -0.1,\n                x: 0.5,\n                autosize: true,\n                orientation: \"h\"\n              }\n            }}\n            config={{\n              modeBarButtonsToRemove: [\n                \"toggleSpikelines\",\n                \"zoomIn2d\",\n                \"zoomOut2d\",\n                \"autoScale2d\",\n                \"hoverClosestCartesian\",\n                \"hoverCompareCartesian\"\n              ],\n              displaylogo: false\n            }}\n            useResizeHandler={true}\n            style={{ width: \"100%\", height: \"100%\" }}\n            modeBarButtonsToRemove={[\"toImage\"]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TimeGraph;\n"]},"metadata":{},"sourceType":"module"}